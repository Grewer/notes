import fs from "fs";

export function getFileSize(path) {
    const size = readFile(path, 0) // b
    return (size / 1024).toFixed(2) // 单位 kb
}

//遍历读取文件
function readFile(path, size) {
    // 忽略.bin 文件
    if (~path.indexOf('.bin')) {
        return
    }

    let files = fs.readdirSync(path)

    files.forEach(walk)

    function walk(file) {
        try {
            let states = fs.statSync(path + '/' + file)
            if (states.isDirectory()) {
                readFile(path + '/' + file, size)
            } else {
                size += states.size
            }
        } catch (e) {
            // 有些文件是引用的, 所以打印不出来, 所以需要做的是 忽略文件
            // console.log(`log: 此文件不存在(可能是引用文件, 将不会计入尺寸中): ${e.path}`);
        }
    }

    return size
}


export const createTopSize = () => {
    let arr = []
    const push = (item) => {
        if (!arr.length) {
            arr.push(item)
            return
        }
        for (let i = 0, len = arr.length; i < len; i++) {
            if (item.size >= arr[i].size) {
                arr.splice(i, 0, item)
                break;
            }
        }
        if (arr.length === 6) {
            arr.pop()
        }
    }

    return {
        length: arr.length,
        push: push,
        arr: arr,
    }
}

export const mapChangeObj = (map) => {
    let obj = {};
    for(let [k,v] of map) {
        obj[k] = v;
    }
    return obj;
}