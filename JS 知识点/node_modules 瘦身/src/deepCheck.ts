const path = require('path')
const exec = require('child_process').exec
const fs = require('fs')
const _ = require('lodash')

const lockPath = path.resolve('package-lock.json')

const execNpmInstall = () => {
    return new Promise((resolve, reject) => {
        exec('npm install', (err, stdout, stderr) => {
            if (err) {
                reject(err)
            } else {
                resolve()
            }
        })
    })
}


function geFileSize(path) {
    const size = readFile(path, 0) // b
    return (size / 1024).toFixed(2) // 单位 kb
}

//遍历读取文件
function readFile(path, size) {
    let files = fs.readdirSync(path)
    files.forEach(walk)

    function walk(file) {
        let states = fs.statSync(path + '/' + file)
        if (states.isDirectory()) {
            readFile(path + '/' + file, size)
        } else {
            size += states.size
        }
    }

    return size
}

async function main() {
    const isExist = fs.existsSync(lockPath)
    if (!isExist) {
        await execNpmInstall()
    }
    const data = fs.readFileSync(lockPath, 'utf8')
    // console.log(JSON.parse(data))
    const contents = JSON.parse(data)
    const allDeps = contents.dependencies

    // console.log(allDeps)
    const mainPack = new Map() // 'zscroller' => '0.4.8'

    // 在 common 中并不外表他就完全是外部的依赖  require 和 dep 可能同时存在
    const commonPack = new Map() // 'typedarray-to-buffer' => [ { mainPack: 'write-file-atomic', requireVersion: '^3.1.5' } ],
    const reDepsPack = new Map() // 'terser-webpack-plugin' => [{location: 'webpack/node_modules/terser-webpack-plugin', version: '1.4.5', label: 'reDeps'}],


    const setCommonPack = (requires, name, deps) => {
        Object.keys(requires).forEach(requireName => {
            if (!commonPack.has(requireName)) {
                commonPack.set(requireName, [])
            }
            if (deps && deps[requireName]) {
                return
            }
            const oldVal = commonPack.get(requireName)
            if(!oldVal.find(it=>it.label === 'common')){
                oldVal.push({
                    location: requireName,
                    version: requires[requireName],
                    label: 'common',
                    size: geFileSize(`./node_modules/${name}`)
                })
                commonPack.set(requireName, oldVal)
            }
        })
    }

    Object.keys(allDeps).forEach(name => {
        const item = allDeps[name]
        if (item.dev) {
            return
        }
        mainPack.set(name, item.version)

        if (item.requires) {
            setCommonPack(item.requires, name, item.dependencies)
        }

        if (item.dependencies) {
            Object.keys(item.dependencies).forEach(depsName => {
                const depsItem = item.dependencies[depsName]
                if (!reDepsPack.has(depsName)) {
                    reDepsPack.set(depsName, [])
                }
                const packArr = reDepsPack.get(depsName);

                packArr.push({
                    location: `${name}/node_modules/${depsName}`,
                    version: depsItem.version,
                    label: 'reDeps',
                    size: geFileSize(`./node_modules/${name}/node_modules/${depsName}`)
                })
                reDepsPack.set(depsName, packArr)
                // if (depsItem.requires) {
                //   setCommonPack(depsItem.requires, depsName)
                // }
            })
        }
    })

    // console.log(mainPack)
    // console.log(commonPack)
    // console.log(reDepsPack)

    const packs = new Map()

    reDepsPack.forEach((value, key) => {
        // console.log(key, commonPack.get(key))
        const itemArr = reDepsPack.get(key)
        if (commonPack.has(key)) {
            itemArr.push(...commonPack.get(key))
        }
        packs.set(key, itemArr)
    })


    function strMapToObj(strMap){
        let obj= Object.create(null);
        for (let[k,v] of strMap) {
            obj[k] = v;
        }
        return obj;
    }

    fs.writeFileSync('deepCheck.json', `${JSON.stringify(strMapToObj(packs), null, 2)}`, {encoding: 'utf-8'})


    console.log(packs.get('prettier'))
}


main()
