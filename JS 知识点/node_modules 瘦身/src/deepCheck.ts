import path from 'path';
import fs from 'fs'
import {createTopSize, getFileSize, mapChangeObj} from "./utils";
import chalk from "chalk";

const lockPath = path.resolve('package-lock.json')


function main(spinner, options) {
    const isExist = fs.existsSync(lockPath)
    if (!isExist) {
        throw new Error('请先执行 npm install 指令')
    }
    const data = fs.readFileSync(lockPath, 'utf8')
    // console.log(JSON.parse(data))
    const contents = JSON.parse(data)
    const allDeps = contents.dependencies
    
    const allPacks = new Map();
    
    const setCommonPack = (requires, name, deps) => {
        Object.keys(requires).forEach(requireName => {
            if (!allPacks.has(requireName)) {
                allPacks.set(requireName, [])
            }
            if (deps && deps[requireName]) {
                return
            }
            const oldVal = allPacks.get(requireName)
            if (!oldVal.find(it => it.label === 'common')) {
                oldVal.push({
                    location: requireName,
                    version: requires[requireName],
                    label: 'common',
                    size: getFileSize(`./node_modules/${requireName}`)
                })
                allPacks.set(requireName, oldVal)
            }
        })
    }
    
    Object.keys(allDeps).forEach(name => {
        const item = allDeps[name]
        if (item.dev) {
            return
        }
        
        if (item.requires) {
            setCommonPack(item.requires, name, item.dependencies)
        }
        
        if (item.dependencies) {
            Object.keys(item.dependencies).forEach(depsName => {
                const depsItem = item.dependencies[depsName]
                if (!allPacks.has(depsName)) {
                    allPacks.set(depsName, [])
                }
                const packArr = allPacks.get(depsName);
                
                packArr.push({
                    location: `${name}/node_modules/${depsName}`,
                    version: depsItem.version,
                    label: 'reDeps',
                    size: getFileSize(`./node_modules/${name}/node_modules/${depsName}`)
                })
                allPacks.set(depsName, packArr)
            })
        }
    })
    
    let topSizeIns = createTopSize()
    
    allPacks.forEach((arr, name, index) => {
        if(arr.length <= 1){
            return
        }
        let localSize = 0
        arr.forEach((item, itemIndex) => {
            const size = Number(item.size)
            localSize += size
        })
        
        topSizeIns.push({items: arr, size: localSize})
    })
    
    spinner.succeed('解析完毕:')
    
    if (options.doc) {
        fs.writeFileSync(`deepCheck.json`, `${JSON.stringify(mapChangeObj(allPacks), null, 2)}`, {encoding: 'utf-8'})
    }
    
    // 打印 top5
    console.log(chalk.yellow('占用空间最大的 5 个重复库:'))
    topSizeIns.arr.forEach(itemObj => {
        const common = itemObj.items.find(it => it.label === 'common')
        console.log(chalk.cyan(`${common.location}--${itemObj.size.toFixed(2)}KB`));
        itemObj.items.forEach(it => {
            console.log(`* ${it.location}@${it.version}--size:${it.size}KB`)
        })
    })
}


export default main
