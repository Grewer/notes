import http from "http";
import fs from 'fs';
const path = require('path')
const opener = require('opener');
const express = require('express');
const baseDir = __dirname
const createServer = () => {
    // const chartData = readStatsFromFile(`${__dirname}../static/deepCheck.json`)
    const chartData = fs.readFileSync(`${__dirname}/../static/deepCheck.json`, 'utf8')

    http.createServer(function (request, response) {
        // 解析请求，包括文件名
        // request.url
        if (request.url === '/') {
            // 从文件系统中读取请求的文件内容
            fs.readFile(`${__dirname}/../static/tools.html`, function (err, data) {
                if (err) {
                    console.log(err);
                    // HTTP 状态码: 404 : NOT FOUND
                    // Content Type: text/html
                    response.writeHead(404, {'Content-Type': 'text/html'});
                } else {

                    // HTTP 状态码: 200 : OK
                    // Content Type: text/html
                    response.writeHead(200, {'Content-Type': 'text/html'});
                    const _data = data.toString().replace(new RegExp('<%chartData%>'), chartData)
                    // 响应文件内容
                    response.write(_data);
                }
                //  发送响应数据
                response.end();
            });
        } else {
            var targetPath = decodeURIComponent(path.join(baseDir,'/../static/', request.url)) //目标地址是基准路径和文件相对路径的拼接,decodeURIComponent()是将路径中的汉字进行解码
            console.log(request.method, request.url, baseDir, targetPath)
            fs.stat(targetPath, (err, stat) => { // 判断文件是否存在
                if (err) { // 如果不存在，返回404
                    response.writeHead(404)
                    response.end('404 Not Found')
                } else {
                    if (stat.isFile()) { // 判断是否是文件
                        fs.readFile(targetPath, (err, data) => {
                            if (err) { // 即使文件存在也有打不开的可能，比如阅读权限等
                                response.writeHead(502)
                                response.end('502 Internal Server Error')
                            } else {
                                response.end(data)
                            }
                        })
                    } else if (stat.isDirectory()) {
                        var indexPath = path.join(targetPath, 'index.html') // 如果是文件夹，拼接index.html文件的地址
                        fs.stat(indexPath, (err, stat) => {
                            if (err) { // 如果文件夹中没有index.html文件
                                if (!request.url.endsWith('/')) { // 如果地址栏里不以/结尾，则跳转到以/结尾的相同地址
                                    response.writeHead(301, {
                                        'Location': request.url + '/'
                                    })
                                    response.end()
                                    return
                                }
                                fs.readdir(targetPath, {withFileTypes: true}, (err, entries) => {
                                    response.writeHead(200, {
                                        'Content-Type': 'text/html; charset=UTF-8'
                                    })
                                    response.end(`
              ${
                                        entries.map(entry => {// 判断是否是文件夹， 如果是文件夹，在后面添加一个'/'，返回一个页面，包含文件夹内的文件明，且每个文件名都是一个链接
                                            var slash = entry.isDirectory() ? '/' : ''
                                            return ` 
                      <div>
                        <a href='${entry.name}${slash}'>${entry.name}${slash}</a>
                      </div>
                    `
                                        }).join('')
                                    }
              `)
                                })
                            } else { // 如果有index.html文件  直接返回文件内容
                                fs.readFile(indexPath, (err, data) => {
                                    response.end(data)
                                })
                            }
                        })
                    }
                }
            })
        }
    }).listen(8080);

// 控制台会输出以下信息
    console.log('Server running at http://127.0.0.1:8080/');

    opener(`http://127.0.0.1:8080/`);
}

export default createServer
